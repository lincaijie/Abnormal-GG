%% Test script

addpath(genpath(pwd));
startup_mtex;   % PolyProc codes are compatible with MTEX v. 5.1 and beyond

%% Body alignment

% Automated registration via genetic optimization
% [~,gid_map_al_t1,tform_matrix_t1,rot_rod_t1] = ...
%     body_alignment_ga('t1.h5','t1.h5','angle',[0,0,0]);
[~,gid_map_al_t2,tform_matrix_t2,rot_rod_t2] = ...
    body_alignment_ga('t1.h5','t2.h5','angle',7);
% resulting para_t2 = [0.98,6.87,0.51,7.22,2.61,15.37];

% Manual, brute-force registration
[gid_map_al_t1,tform_matrix_t1,rot_rod_t1] = ...
    body_alignment('t1.h5','t1.h5',0,0,0,0,0,0);
% [gid_map_al_t2,tform_matrix_t2,rot_rod_t2] = ...
%    body_alignment('t1.h5','t2.h5',0,6,0,7.3,2.7,16);

%% Intersection volume

gid_map_mask = scope_mask(gid_map_al_t1,gid_map_al_t2);


%% Clean up of volume t1

% Loading and processing data
[gid_map_1, rodV_1, comp_1, numElement_1, grain_rodV_1, ...
    grain_coord_1, grain_surface_1, adj_1, cs_1] = ...
    grain_clean_up('t1.h5',...
    'crystal', 'cubic',...
    'tform', tform_matrix_t1, rot_rod_t1, ...
    'mask', gid_map_mask, ...
    'threshold_ang', 1, ...
    'threshold_vol', 33, ...
    'threshold_comp', 0.1);

% Loading data only
% [gid_map_1, rodV_1, comp_1, numElement_1, grain_rodV_1, ...
%     grain_coord_1, grain_surface_1, adj_1, cs_1] = ...
%     grain_clean_up('t1.h5',...
%     'crystal', 'cubic',...
%     'threshold_ang', 0, ...
%     'threshold_vol', 0, ...
%     'threshold_comp', 0);

%% Clean up of volume t2

[gid_map_2, rodV_2, comp_2, numElement_2, grain_rodV_2, ...
    grain_coord_2, grain_surface_2, adj_2, cs_2] = ...
    grain_clean_up('t2.h5',...
    'crystal', 'cubic',...
    'tform', tform_matrix_t2, rot_rod_t2, ...
    'mask', gid_map_mask, ...
    'threshold_ang', 1, ...
    'threshold_vol', 33, ...
    'threshold_comp', 0.1);
                     
%% Grain statistics for t1

% Calculate distributions of grain size, shape, topology, misorientation
grain_stat(gid_map_1, numElement_1, adj_1, grain_rodV_1, ...
    grain_surface_1, 'cubic');

% Calculate inverse pole figure
ipf_viz(gid_map_1, grain_rodV_1, 'cubic')

%% Visualization of polycrystal t1

% 3D visualization
vol_viz(gid_map_1, 'orientation', grain_rodV_1, 'cubic')
% vol_viz(gid_map_1, 'size', numElement_1)
% vol_viz(gid_map_1, 'completness', comp_1)
% vol_viz(gid_map_1, 'neighbor')
% vol_viz(gid_map_1)

% slice visualization
slice_viz(gid_map_1, 'slice', [77 76 75], ...
    'orientation', grain_rodV_1, 'cubic')
% slice_viz(gid_map_1,'slice',[70 71 72 73 74 75],'size', numElement_1)
% slice_viz(gid_map_1,'slice',77,'completness', comp_1)
% slice_viz(gid_map_1,'slice',77,'neighbor')
% slice_viz(gid_map_1,'slice',77)

%% Visualization of specific grains in t1

% boundary_visualization
[neighbor_angle_1, neighbor_angle_axis_1, neighbor_surface_1]= ...
    boundary_viz(gid_map_1, grain_rodV_1, 'cubic', adj_1, 'goi', 117 );

% particle visualization
load('particle_position_t1.mat', 'P_position_t1')
[adj_particle_coord] = multi_viz(gid_map_1, P_position_t1, 'goi', 117);

% particle-associated misorientation distribution 
% load('particle_position_t1.mat', 'P_position_t1')
[~, ~, ~,p_storage]= ...
    pmdf(gid_map_1, grain_rodV_1, ...
    'cubic', adj_1, P_position_t1,'goi',117 );

%% Grain tracking between t1 and t2

% automated tracking via combinatorial optimization
[grain_matching_hun, matching_efficiency_hun] = ...
    tracking_hun(gid_map_1, ...
    numElement_1, grain_rodV_1,...
    gid_map_2, numElement_2, grain_rodV_2,...
    'cubic', 'extension', 2,'misorientation', 4, 'viz', 50);

% brute-force tracking                
[grain_matching_brute, matching_efficiency_brute] = ...
    tracking_brute(gid_map_1, ...
    numElement_1, grain_rodV_1, ...
    gid_map_2, numElement_2, grain_rodV_2,...
    'cubic', 'extension', 2,'misorientation', 4);